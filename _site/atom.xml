<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Curtis Larson's Blog</title>
 <link href="http://curtismlarson.com/blog/atom.xml" rel="self"/>
 <link href="http://curtismlarson.com/blog"/>
 <updated>2019-02-14T11:28:22+09:00</updated>
 <id>http://curtismlarson.com/blog</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>xw
   <title>How to Read, Write, and Update XML with Node.js</title>
   <link href="http://curtismlarson.com/blog/2018/10/03/edit-xml-node-js/"/>
   <updated>2018-10-03T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2018/10/03/edit-xml-node-js</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Often times I have to make small edits to XML files provided by clients due to various errors that are in the file or updates that need to be made to the data. Rather than manually edit potentially thousands of lines of XML I usually write a quick script to do the changes automatically. I’ll show you how to easily read, write, and update xml using Node.js and a useful npm package.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;First off you need to create a directory, run &lt;code&gt;npm init&lt;/code&gt; and then run &lt;code&gt;npm install --save xml2json&lt;/code&gt; to install the &lt;a href=&quot;https://www.npmjs.com/package/xml2json&quot;&gt;xml2json&lt;/a&gt; package which will be doing the bulk of the work. Make sure to also create a main JavaScript file (like &lt;code&gt;index.js&lt;/code&gt;) and have your &lt;code&gt;package.json&lt;/code&gt; point to it correctly. Here’s an example of an xml file that needs to be edited:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Survey&amp;gt;
  &amp;lt;!-- QUESTION 1 --&amp;gt;
  &amp;lt;Question QuestionId='1'&amp;gt;
    &amp;lt;QuestionText&amp;gt;What is the air speed velocity of an unladen swallow?&amp;lt;/QuestionText&amp;gt;
  &amp;lt;/Question&amp;gt;

    &amp;lt;!-- ANSWER 1 --&amp;gt;
  &amp;lt;Answer QuestionId='1' AnswerTypeId='1' DisplayOrder='1' AnswerId='286'&amp;gt;
    &amp;lt;AnswerText&amp;gt;12?&amp;lt;/AnswerText&amp;gt;
  &amp;lt;/Answer&amp;gt;

    &amp;lt;!-- ANSWER 2 --&amp;gt;
  &amp;lt;Answer QuestionId='1' AnswerTypeId='1' DisplayOrder='2' AnswerId='286'&amp;gt;
    &amp;lt;AnswerText&amp;gt;African or European&amp;lt;/AnswerText&amp;gt;
  &amp;lt;/Answer&amp;gt;

    &amp;lt;!-- ANSWER 3 --&amp;gt;
  &amp;lt;Answer QuestionId='1' AnswerTypeId='1' DisplayOrder='3' AnswerId='286'&amp;gt;
    &amp;lt;AnswerText&amp;gt;11 meters per second.&amp;lt;/AnswerText&amp;gt;
  &amp;lt;/Answer&amp;gt;

    &amp;lt;!-- ANSWER 4 --&amp;gt;
  &amp;lt;Answer QuestionId='1' AnswerTypeId='1' DisplayOrder='4' AnswerId='286'&amp;gt;
    &amp;lt;AnswerText&amp;gt;I don’t know.&amp;lt;/AnswerText&amp;gt;
  &amp;lt;/Answer&amp;gt;
&amp;lt;/Survey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the XML file the &lt;code&gt;AnswerId&lt;/code&gt; property is repeated for each answer. This was causing problems with the import script that needed to generate a survey from the XML.&lt;/p&gt;

&lt;h2 id=&quot;reading-and-parsing-the-xml&quot;&gt;Reading and Parsing the XML&lt;/h2&gt;

&lt;p&gt;The first step was reading the xml file, which I dropped into the same folder as my main JavaScript file and aptly named it &lt;code&gt;survey.xml&lt;/code&gt;. Reading the xml file is as easy as importing the &lt;code&gt;fs&lt;/code&gt; package and using the &lt;code&gt;readFile&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require('fs');

fs.readFile( './survey.xml', function(err, data) {

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have access to the raw xml data we can throw it into the &lt;code&gt;xml2json&lt;/code&gt; parser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require('fs');
var parser = require('xml2json');

fs.readFile( './survey.xml', function(err, data) {
  var json = JSON.parse(parser.toJson(data, {reversible: true}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;toJson&lt;/code&gt; function allows us to convert a raw XML string into a stringified JSON object. Using &lt;code&gt;JSON.parse&lt;/code&gt; will convert that string into a JavaScript object that we can manipulate. Notice the option of &lt;code&gt;{reversible: true}&lt;/code&gt; that I passed into the &lt;code&gt;toJson&lt;/code&gt; function. This allows us to convert the JSON we manipulate back to conformant XML.&lt;/p&gt;

&lt;h2 id=&quot;editing-the-xml&quot;&gt;Editing the XML&lt;/h2&gt;

&lt;p&gt;As mentioned above, we want to make sure that the &lt;code&gt;AnswerId&lt;/code&gt; property is unique for each &lt;code&gt;Answer&lt;/code&gt;. We can do this by looping through each of the answers and setting it’s &lt;code&gt;AnswerId&lt;/code&gt; property to the index of the loop as so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require('fs');
var parser = require('xml2json');

fs.readFile( './survey.xml', function(err, data) {
  var json = JSON.parse(parser.toJson(data, {reversible: true}));
  var answers = json[&quot;Survey&quot;][&quot;Answer&quot;];
  for (var i = 0; i &amp;lt; answers.length; i++) {
    var answer = answers[i];
    answer.AnswerId = i;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that I accessed &lt;code&gt;json[&quot;Survey&quot;][&quot;Answer&quot;]&lt;/code&gt; and it returned an array of objects. The JSON object is structured so that each XML element is nested inside it’s parent element as an object property. Elements that are at the same level are just added to an array rather than as separate properties. This allows us to access all Answers at once that are a child of the &lt;code&gt;Survey&lt;/code&gt; element.&lt;/p&gt;

&lt;h2 id=&quot;converting-back-to-xml-and-writing&quot;&gt;Converting back to XML and Writing&lt;/h2&gt;

&lt;p&gt;Now that we have made the necessary change we can use &lt;code&gt;xml2json.toXml&lt;/code&gt; to convert the modified JSON back into xml which we can write back to a file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fs = require('fs');
var parser = require('xml2json');

fs.readFile( './survey.xml', function(err, data) {
  var json = JSON.parse(parser.toJson(data, {reversible: true}));
  var answers = json[&quot;Survey&quot;][&quot;Answer&quot;];
  for (var i = 0; i &amp;lt; answers.length; i++) {
    var answer = answers[i];
    answer.AnswerId = i;
  }

  var stringified = JSON.stringify(json);
  var xml = parser.toXml(stringified);
  fs.writeFile('survey-fixed.xml', xml, function(err, data) {
    if (err) {
      console.log(err);
    }
    else {
      console.log('updated!');
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to make sure to call &lt;code&gt;JSON.stringify&lt;/code&gt; on the JavaScript object before we pass it to the &lt;code&gt;toXML&lt;/code&gt; function (which expects a string). Since we used the &lt;code&gt;reversible&lt;/code&gt; property we should now have a fully compliant XML file that has fixed &lt;code&gt;AnswerId&lt;/code&gt; properties. That’s all you need to know for reading, updating, then writing back an XML file with Node.js. Feel free to leave a comment or ask any questions!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Remote Software Developer Freelance Sites</title>
   <link href="http://curtismlarson.com/blog/2018/10/01/remote-software-developer-freelance-site-list/"/>
   <updated>2018-10-01T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2018/10/01/remote-software-developer-freelance-site-list</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Periodically I find that my normal freelance client sourcing techniques have run dry. Whenever that happens I usually turn to one of the many freelance job boards or agencies that are available online. This is an easy way to add a supplemental stream of work during slow periods. I decided to collect my entire list here both as a reference for myself and as a helpful guide for others that want to know the various sites that are out there. I will periodically update this page when I find more resources.&lt;/p&gt;

&lt;h2 id=&quot;the-sites&quot;&gt;The sites&lt;/h2&gt;

&lt;h3 id=&quot;online-freelancing-platforms&quot;&gt;Online Freelancing Platforms&lt;/h3&gt;

&lt;p&gt;These freelancing platforms are websites where you have to go through some sort of interview process in order to be accepted into their platform. Often times they market themselves as “Top N%” or “Elite Freelancers” who can command a higher rate. I’ve found this to be generally true although if you work for them you do not capture your full effective rate, as they often take a significant cut from your hourly rate. Nevertheless if you’re efficient enough it’s a great way to find work.&lt;/p&gt;

&lt;h4 id=&quot;gigsterhttpsgigstercom&quot;&gt;1. &lt;a href=&quot;https://gigster.com/&quot;&gt;Gigster&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gigster has marketed itself as an invite-only network of world class developers, designers, and product managers. The interview process is known to be pretty thorough and extensive, but once you’re in you have access to a large amount of projects. Personally the best part of this platform is the other people you work with. Often times you are paired with a Product Manager and/or a Designer so you can focus solely on the development work and maximize your hourly rate. Gigster is currently transitioning into more of an “AI” based freelancing platform, using technologies that their internal developers create to better match freelancers with projects.&lt;/p&gt;

&lt;h4 id=&quot;toptalhttpswwwtoptalcom&quot;&gt;2. &lt;a href=&quot;https://www.toptal.com/&quot;&gt;Toptal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Similar to Gigster, Toptal markets itself as an exclusive network of the top freelance software developers, designers, finance experts, and project managers in the world. They proudly say they only hire the top 3% of freelance talent, although whether that is due to the skill barrier or the extensive interview process is unknown. Developers are expected to go through multiple levels of code interviews and sample projects before they are accepted into the platform. All projects are 1099, and they are hourly, part-time (20 hrs/week), and full-time (40 hours/week). They can range anywhere from a few months long to 1+ years.&lt;/p&gt;

&lt;h4 id=&quot;moonlightworkhttpswwwmoonlightworkcomr5640&quot;&gt;3. &lt;a href=&quot;https://www.moonlightwork.com/r/5640&quot;&gt;MoonlightWork&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This is a newer freelancing platform with a much lower bar for entry. You are vetted by the website owners but do not have to go through any sort of formal interview process. Once you are accepted you setup your profile and submit applications to various job postings based on your skill set. After applying the clients will reach out for further information/vetting. The amount of jobs on this platform is much less than the other platforms mentioned, most likely due ot it’s newer presence.&lt;/p&gt;

&lt;h4 id=&quot;guniohttpsgunio&quot;&gt;4. &lt;a href=&quot;https://gun.io&quot;&gt;Gun.io&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gun.io is a high quality freelancing platform that’s focused on not only developers, but product managers, designers, UX professionals etc. There are two levels of Gun.io: The first one being a public slack channel where you can apply for newly posted jobs and share both work and apply for work posted by other community members. Once an application to a specific Gun.io job gets the attention of a team member, you go through an application process and are linked up with the client. From then on you are a “vetted” member of the community that gives you better access to clients and the ability to be payed directly through the Gun.io platform.&lt;/p&gt;

&lt;h3 id=&quot;online-bidding-freelance-platforms&quot;&gt;Online Bidding Freelance Platforms&lt;/h3&gt;

&lt;p&gt;I think of these platforms as more of a “Race to the bottom” mentality as you’re often competing with thousands of other developers who will likely offer to work for much less than your hourly rate. These platforms can be a good way to get some initial work and build up your experience, but unless you have a ton of completed projects on them it often is a waste of time. If you do end up using these platforms, I suggest finding a solid client and attempting to move them off the platform in order for you to secure a better hourly rate.&lt;/p&gt;

&lt;h4 id=&quot;upworkhttpswwwupworkcom&quot;&gt;&lt;a href=&quot;https://www.upwork.com/&quot;&gt;Upwork&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Upwork is perhaps the best known of the online freelance bidding platforms. With it’s popularity comes a caveat that there is a large amount of underqualified freelancers that will often underbid you for projects. Starting out with no rating or feedback from clients will often make it difficult to find your first client who is willing to take a chance on you. It’s usually recommended to lower your rates originally to attract a client and then continuously raise them until you are able to have a steady flow of work at the rate that you want. Another thing to mention is that Upwork may charge upwards of a 20% on any payment you receive from clients. That’s quite a large fee to just act as the intermediary between you and a client, which is why it’s often recommended to get steady clients off of the platform as quickly as possible.&lt;/p&gt;

&lt;h4 id=&quot;freelancercomhttpswwwfreelancercom&quot;&gt;&lt;a href=&quot;https://www.freelancer.com/&quot;&gt;Freelancer.com&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Freelancer.com is another popular freelance platform similar to Upwork. The fee structure is similar, ranging from 10-20% depending on the type of project. One limiting factor is that freelancers can only submit a max of 8 proposals before they have to upgrade to a paid account. This monthly fee is not very common on these online platforms and freelancer.com seems to sneak in other fees like “inactive” fees and currency conversion fees. All this adds up and has created quite a lot of negative reviews for the platform.&lt;/p&gt;

&lt;h4 id=&quot;fiverrhttpswwwfiverrcom&quot;&gt;&lt;a href=&quot;https://www.fiverr.com/&quot;&gt;Fiverr&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yet another online bidding platform that markets itself more for quick $5 jobs. However $5 jobs doesn’t lend itself well to software development and creates a “race to the bottom” mentality. The ease of creating a free account with no membership fees just exacerbates this issue. There have also been many reports of fiverr taking the side of companies rather than freelancers on disputes. I’d recommend sticking to one of the more software development friendly platforms as the time investment here is most likely not going to be worth it.&lt;/p&gt;

&lt;h3 id=&quot;online-job-boards&quot;&gt;Online Job Boards&lt;/h3&gt;

&lt;p&gt;Online job boards allow a client to post an opening for a freelance position that you can apply to directly. The quality is often less than a freelancing platform but if you’re able to find a good client the payoff may be much greater in the end as you can negotiate your rate to whatever you want.&lt;/p&gt;

&lt;h4 id=&quot;reddit-rforhirehttpswwwredditcomrforhire&quot;&gt;1. &lt;a href=&quot;https://www.reddit.com/r/forhire/&quot;&gt;Reddit /r/forhire&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Reddit is an amazing collection of thousands of sub-communities based on any interest you might have. The /r/forhire board is a constantly updating place where people can create either [Hiring] or [For Hire] postings. Alongside the /r/jobbit subreddit, this is a great place to post your portfolio every once and awhile which should yield some responses along with checking daily for new postings. The demand for work seems to outpace the demand for freelancers though, so make sure you reply quickly or else you may miss out on many opportunities.&lt;/p&gt;

&lt;h4 id=&quot;craigslisthttpscraigslistorg&quot;&gt;2. &lt;a href=&quot;https://craigslist.org&quot;&gt;Craigslist&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The Craigslist computer gigs section is more often than not a wasteland of people paying next to nothing or not knowing what they are looking for in a freelance developer. It’s worth a quick scan every now and again to maybe find the diamond in the rough, but most of the time it’s not worth the effort.&lt;/p&gt;

&lt;h4 id=&quot;we-work-remotelyhttpsweworkremotelycomcategoriesremote-programming-jobs&quot;&gt;3. &lt;a href=&quot;https://weworkremotely.com/categories/remote-programming-jobs&quot;&gt;We Work Remotely&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;We Work Remotely is the largest community on the web to find and list jobs that aren’t restricted by commutes or a specific location. Companies will post full time or freelance jobs that are fully remote across many different skill sets. The quality of job postings is often quite high, as a company needs to pay $299 a month to have a job posted. The subscription function makes it easy to have new jobs delivered to your inbox daily.&lt;/p&gt;

&lt;h4 id=&quot;we-work-meteorhttpswwwweworkmeteorcom&quot;&gt;4. &lt;a href=&quot;https://www.weworkmeteor.com/&quot;&gt;We Work Meteor&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Similar to We Work Remotely, We Work Meteor is a job posting board that is specific to the Meteor programming language. It used to be quite popular in the past but has slowly been dying out as Meteor loses its popularity.&lt;/p&gt;

&lt;h4 id=&quot;freelancermaphttpswwwfreelancermapcom&quot;&gt;5. &lt;a href=&quot;https://www.freelancermap.com/&quot;&gt;Freelancermap&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Freelancer map allows you to sign up, create a profile, and apply to programming jobs all in one place. With the ability to filter based on remote positions, keywords, and type of work and have jobs delivered to your email daily using their “Project Agents”, it’s another good website to sign up for and forget.&lt;/p&gt;

&lt;h5 id=&quot;last-updated-2142019-to-include-gunio&quot;&gt;Last updated 2/14/2019 to include gun.io&lt;/h5&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Webpack & Heroku - Build failure with no error message</title>
   <link href="http://curtismlarson.com/blog/2016/07/06/webpack-heroku-build-fails-no-error/"/>
   <updated>2016-07-06T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2016/07/06/webpack-heroku-build-fails-no-error</id>
   <content type="html">&lt;h2 id=&quot;the-error&quot;&gt;The error&lt;/h2&gt;

&lt;p&gt;Another fix for a webpack build error here! This one took a little while to figure out, and is directly related to the heroku deploy system. The symptoms are an unexpected failure in the heroku build process, often with the last log message being something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 68% 834/858 buil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;

&lt;p&gt;In my &lt;code&gt;webpack.config&lt;/code&gt; I had my &lt;code&gt;deploy&lt;/code&gt; script as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;webpack --config --progress webpack.production.config.js&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Removing the &lt;code&gt;--progress&lt;/code&gt; flag ended up fixing the problem. The underlying issue was that the large amount of log / print statements that &lt;code&gt;--progress&lt;/code&gt; was generating was causing the build process to crash on heroku (but not locally). I hope this saves time for anyone else with this issue!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor 1.3+ - Connect to Redis on the Server</title>
   <link href="http://curtismlarson.com/blog/2016/05/31/meteor-connect-to-redis/"/>
   <updated>2016-05-31T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2016/05/31/meteor-connect-to-redis</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;While doing research on backend connectors for the new &lt;a href=&quot;http://www.apollostack.com&quot;&gt;Apollo Stack&lt;/a&gt; by the Meteor team I wanted to easily connect to a redis server from my own Meteor server. The following is a writeup of the steps to set this up. As always the full source code for this tutorial is available on &lt;a href=&quot;https://github.com/quackware/meteor-redis-tutorial&quot;&gt;my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install-redis&quot;&gt;Install Redis&lt;/h2&gt;

&lt;p&gt;We can download redis onto your computer from their &lt;a href=&quot;http://redis.io/download&quot;&gt;download page&lt;/a&gt;. Mac users that have homebrew can also easily install it via &lt;code&gt;brew install redis&lt;/code&gt;. The rest of this tutorial will assume you are running redis on a Mac.&lt;/p&gt;

&lt;p&gt;Once redis is installed you can start it by just typing &lt;code&gt;redis-server&lt;/code&gt; which should give you the following prompt:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KvxiYaw.png&quot; alt=&quot;Redis Prompt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that it is using the default port of &lt;code&gt;6379&lt;/code&gt;. If you want to change this port from the default you will also need to change the way your redis package connects to the server. You can also play around with the server by typing &lt;code&gt;redis-cli&lt;/code&gt; and manually enter in commands in the cli.&lt;/p&gt;

&lt;h2 id=&quot;install-packages&quot;&gt;Install Packages&lt;/h2&gt;

&lt;p&gt;We also need to install the following packages to get redis setup. The most notable is &lt;a href=&quot;https://github.com/NodeRedis/node_redis&quot;&gt;node_redis&lt;/a&gt; which allows us to communicate with the redis server we installed in the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor npm install --save redis
meteor npm install --save hiredis
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;server-side-redis&quot;&gt;Server Side Redis&lt;/h2&gt;

&lt;p&gt;Setting up redis on the server is fairly simple, as you just need the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/2b06110fa475ac6080a3f5f1c69e7789.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We require the redis package, create a client from it, and wrap the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions so that they can easily be used with &lt;code&gt;Meteor.methods&lt;/code&gt;. We then export the client so it can be used in any other modules by just calling &lt;code&gt;require(&quot;redis.js&quot;)&lt;/code&gt;. If you want to change the default port you can pass in additional options to &lt;code&gt;createClient&lt;/code&gt;. A full overview of the api is available on the &lt;a href=&quot;https://github.com/NodeRedis/node_redis&quot;&gt;node_redis GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;meteor-methods&quot;&gt;Meteor Methods&lt;/h2&gt;

&lt;p&gt;The meteor methods are very basic for testing purposes. We just have a simple &lt;code&gt;setRedis&lt;/code&gt; and &lt;code&gt;getRedis&lt;/code&gt; method that use our wrapped redis functions. This allows us to test the redis functionality from the client.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/42058d667822fcd7cf4e5c39ddafcf45.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;client-side-code&quot;&gt;Client Side Code&lt;/h2&gt;

&lt;p&gt;The client side code is composed of a few input fields and buttons that are hooked up to &lt;code&gt;Meteor.call&lt;/code&gt; code. This allows us to test our simple &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/2b9919c242942ee71af74e6f312e8a41.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4b3ba350013f346fddd38460a3db8f5f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Clicking &lt;code&gt;set&lt;/code&gt; will add the key/value pair to the redis server. You can then retrieve the value by clicking &lt;code&gt;get&lt;/code&gt; which will populate the &lt;code&gt;Get Value&lt;/code&gt; label.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for this short tutorial with the bulk of the content being installing and setting up redis on the server. As you can see it’s very straightforward to add data stores other than MongoDB to your Meteor application, all thanks to the new npm support provided in Meteor 1.3+. As always the full source code for this tutorial is available on &lt;a href=&quot;https://github.com/quackware/meteor-redis-tutorial&quot;&gt;my GitHub&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>xw
   <title>Webpack - ERROR in Cannot find module '../modules/web.dom.iterable' @ multi main</title>
   <link href="http://curtismlarson.com/blog/2016/05/12/webpack-cannot-find-module-web-dom-iterable/"/>
   <updated>2016-05-12T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2016/05/12/webpack-cannot-find-module-web-dom-iterable</id>
   <content type="html">&lt;h2 id=&quot;the-error&quot;&gt;The error&lt;/h2&gt;

&lt;p&gt;I started up a new webpack/react project recently and immediately ran into this error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR in Cannot find module '../modules/web.dom.iterable'
 @ multi main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After reinstalling &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, adding various modules such as &lt;code&gt;core-js&lt;/code&gt; I was still unable to fix the problem. The solution that finally fixed it was actually the simplest&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf node_modules &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I completely reinstalled my local &lt;code&gt;node_modules&lt;/code&gt;, everything worked! I hope this saves someone else a few hours of time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Node - Exclude fields from select with Mongoose/MongoDB</title>
   <link href="http://curtismlarson.com/blog/2016/05/11/mongoose-mongodb-exclude-select-fields/"/>
   <updated>2016-05-11T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2016/05/11/mongoose-mongodb-exclude-select-fields</id>
   <content type="html">&lt;h2 id=&quot;excluding-a-field&quot;&gt;Excluding a Field&lt;/h2&gt;

&lt;p&gt;Say you have a mongoose schema for a user as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var userSchema = mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
});

var User = mongoose.model(&quot;User&quot;, userSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you don’t want to send the &lt;code&gt;password&lt;/code&gt; field to the client when you perform a &lt;code&gt;User.find&lt;/code&gt;. Rather than directly deleting the &lt;code&gt;password&lt;/code&gt; field from the user object before you send it to the client, mongoose provides some easy to use functionality to exclude your &lt;code&gt;password&lt;/code&gt; field. There are two ways you can accomplish this.&lt;/p&gt;

&lt;h3 id=&quot;individually&quot;&gt;Individually&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;User.findOne({_id: userId}).select(&quot;-password&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;in-the-schema&quot;&gt;In the Schema&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var userSchema = mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
    select: false,
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the new &lt;code&gt;select: false&lt;/code&gt; field in the password field of the User schema. Now whenever you perform a find with either method, the password field will not be included in the response.&lt;/p&gt;

&lt;h2 id=&quot;including-the-excluded-field&quot;&gt;Including the Excluded Field&lt;/h2&gt;

&lt;p&gt;But what if you need to check the password with a value (Such as in the login method)? You can explictly allow the password field to be returned in your find call as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.findOne({_id: userId}).select(&quot;+password&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for this tutorial. This is very common functionality in any Node/MongoDB/Mongoose related application, and avoiding publishings fields that can compromise your application is always a good idea!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Secure, Scalable Uploading to S3 with Slingshot (Video Presentation)</title>
   <link href="http://curtismlarson.com/blog/2016/05/06/meteor-secure-scalable-s3-uploads-slingshot/"/>
   <updated>2016-05-06T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2016/05/06/meteor-secure-scalable-s3-uploads-slingshot</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Often times when you first build a file upload tool in Meteor you look towards using a package like &lt;a href=&quot;https://atmospherejs.com/cfs/gridfs&quot;&gt;CollectionFS GridFS&lt;/a&gt; to store files directly in MongoDB. However as more and more files are uploaded it can reduce your database speed to a crawl. A much better solution is a completely client side file upload implementation powered by &lt;a href=&quot;https://github.com/CulturalMe/meteor-slingshot&quot;&gt;Slingshot&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently gave a presentation at the &lt;a href=&quot;http://www.meetup.com/Meteor-NY&quot;&gt;Meteor NYC Meetup&lt;/a&gt; with my co-presenter &lt;a href=&quot;https://github.com/alanning&quot;&gt;Adrian Lanning&lt;/a&gt; where we gave a short demo and talked about the functionality of building a secure, scalable uploading tool with Slingshot and S3. Luckily the presentation was recorded so you can watch it below! As always the full source code of the presentation can be found on &lt;a href=&quot;https://github.com/quackware/meteor-slingshot-example&quot;&gt;My Github&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;h2 id=&quot;video-presentation&quot;&gt;Video Presentation&lt;/h2&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/9VAldOPkqqs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Those with an existing GridFS implementation or that just want to add a great file upload tool to their Meteor website can contact me below to start a discussion and receive a quote.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Reactive Location Search Engine with MongoDB and Google Maps</title>
   <link href="http://curtismlarson.com/blog/2015/12/11/meteor-location-search-engine-mongodb-google-maps/"/>
   <updated>2015-12-11T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/12/11/meteor-location-search-engine-mongodb-google-maps</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One cool feature that I have been adding a lot recently to my client’s websites is the ability to search for jobs, users, etc and have the search results display reactively in Google Maps. This is relatively easy to accomplish in Meteor if we combine a few useful packages and use MongoDB’s location searching functionality. In this tutorial we are going to create a simple website that allows us to add jobs with a title and location and then search for those jobs and have them display on an embedded Google Map. The full source code for this tutorial is available on &lt;a href=&quot;https://github.com/quackware/meteor-location-search&quot;&gt;My GitHub Page&lt;/a&gt;. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;This tutorial requires quite a few Meteor packages that make our life easier. Below are the required ones that I will be referencing throughout the tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add aldeed:autoform
meteor add aldeed:collection2
meteor add dburles:google-maps
meteor add ejson
meteor add iron:router
meteor add lukemadera:autoform-googleplace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also include these optional dependencies. They are not 100% necessary to get your app working, but make your life easier and I will be using them throughout this tutorial.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add less
meteor add nemo64:bootstrap
meteor add reactive-var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aldeed/meteor-autoform&quot;&gt;aldeed:autoform&lt;/a&gt; and &lt;a href=&quot;https://github.com/aldeed/meteor-collection2&quot;&gt;aldeed:collection2&lt;/a&gt; are used primarily to make it easy to create forms on the client and submit data to the server. Additionally they are required if we want to take advantage of the awesome &lt;a href=&quot;https://github.com/lukemadera/meteor-autoform-googleplace/&quot;&gt;lukemadera:autoform-googleplace&lt;/a&gt; package which adds a Google places search input for autoform. autoform-googleplace requires &lt;code&gt;ejson&lt;/code&gt; so we need to add that package also. &lt;a href=&quot;https://github.com/dburles/meteor-google-maps&quot;&gt;dburles:google-maps&lt;/a&gt; is a great wrapper of the &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot;&gt;Google Maps JavaScript API&lt;/a&gt; that allows us to embed a live Google Maps display in our website. The final required dependency is &lt;a href=&quot;https://github.com/iron-meteor/iron-router&quot;&gt;iron:router&lt;/a&gt; which allows us to set up our routes and configure when we want to load in the Google Maps code.&lt;/p&gt;

&lt;p&gt;The optional dependencies are &lt;code&gt;bootstrap&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;reactive-var&lt;/code&gt; which allow us to style our website very easily and take advantage of &lt;code&gt;ReactiveVars&lt;/code&gt; so we can organize our JavaScript code in a clean manner.&lt;/p&gt;

&lt;h2 id=&quot;additional-setup&quot;&gt;Additional Setup&lt;/h2&gt;

&lt;p&gt;Besides the various packages we need to install we also need to obtain a &lt;a href=&quot;https://developers.google.com/maps/signup?hl=en&quot;&gt;Google Maps Key&lt;/a&gt; that has been enabled for the &lt;code&gt;Google Maps JavaScript API&lt;/code&gt; and &lt;code&gt;Google Places API Web Service&lt;/code&gt;. This will allow us to access Google’s apis for location search and map embedding. You can setup your key in your settings.json file like below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/67fe8dcc60d9286f30e4.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;setting-up-our-database-schema&quot;&gt;Setting up our Database Schema&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is setup our MongoDB and AutoForm schemas so that we can create our AutoForms and do location searches. The docs for &lt;a href=&quot;https://github.com/lukemadera/meteor-autoform-googleplace/&quot;&gt;lukemadera:autoform-googleplace&lt;/a&gt; show the structure of the Google Places data that is returned from the search input, so we can use that to create our &lt;code&gt;Address&lt;/code&gt; schema. Additionally we are going to create a &lt;code&gt;Job&lt;/code&gt; schema that will hold our job title and the location of the job. Finally we need to create a &lt;code&gt;Search&lt;/code&gt; schema for our search autoform. You can view the code for all the schemas below (Note: All this code should be included in a lib/ folder so it can be accessed from both the client and the server):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/3d70789fa05556b80cec.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some important things to note include the &lt;code&gt;geometry&lt;/code&gt; object in our &lt;code&gt;Address&lt;/code&gt; schema. This object will hold the geometry type and coordinates (lat and lon) that will be used by MongoDB for location searches. We also define our &lt;code&gt;Jobs&lt;/code&gt; collection and attach it to our schema. This is the collection we will be inserting job data into and searching for jobs with.&lt;/p&gt;

&lt;p&gt;One additional step to ensure our schema works correctly with MongoDB location search is to define the correct index on our geometry data. This can be accomplished with an &lt;code&gt;_ensureIndex&lt;/code&gt; call like below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/0a3e7750b74e21d5ad56.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;publisher-code&quot;&gt;Publisher Code&lt;/h2&gt;

&lt;p&gt;Now that we have correctly defined our schemas we can implement the code that will perform the location search. We need to create a simple publisher that recieves search data from the client and uses a &lt;a href=&quot;https://docs.mongodb.org/v3.0/reference/operator/query/near/&quot;&gt;MongoDB $near query&lt;/a&gt; on our &lt;code&gt;geometry&lt;/code&gt; object we mentioned above. You can see the code for the publisher below (Note: This code should be included in the server/ folder):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/667f8619b1dae4c99eed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;searchData&lt;/code&gt; just contains the data we defined in our &lt;code&gt;Schemas.Search&lt;/code&gt; SimpleSchema. Now whenever we subscribe to our &lt;code&gt;jobSearch&lt;/code&gt; publisher with correct data we will receive location based results.&lt;/p&gt;

&lt;h2 id=&quot;database-insert-code&quot;&gt;Database Insert Code&lt;/h2&gt;

&lt;p&gt;Thanks to the simplicity of AutoForm, our code for inserting a new job into the database is very simple (Note: This code should be included in the server/ folder).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/f701543e946f40155a44.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;All we need to do is check the data passed into our &lt;code&gt;Meteor.method&lt;/code&gt; with our &lt;code&gt;Schemas.Job&lt;/code&gt; we defined above. If that data passes the check then we insert it into our &lt;code&gt;Jobs&lt;/code&gt; collection so it can be searched for.&lt;/p&gt;

&lt;h2 id=&quot;client-side-route&quot;&gt;Client Side Route&lt;/h2&gt;

&lt;p&gt;Now that our server side code is complete, we need to add the client side code that will send job and location information to the server. To start out, we need to create a simple route in &lt;code&gt;iron:router&lt;/code&gt; that will load our &lt;code&gt;index&lt;/code&gt; template. Additionally we want to make sure that we load the &lt;code&gt;GoogleMaps&lt;/code&gt; api exposed by &lt;a href=&quot;https://github.com/dburles/meteor-google-maps&quot;&gt;dburles:google-maps&lt;/a&gt; so that we can render an embeded map in our template (Note: This code and the rest of the code in the tutorial should be included in the client/ folder).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/742264d5b0f8644e7dcd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The route code is pretty straightforward. The most complicated part is the &lt;code&gt;onBeforeAction&lt;/code&gt; hook where we check to see if the &lt;code&gt;GoogleMaps&lt;/code&gt; api has already been loaded, and if it has not then we load it using our Google maps api key we defined in our &lt;code&gt;settings.json&lt;/code&gt; file. Additionally make sure to specify the correct &lt;code&gt;geometry&lt;/code&gt; and &lt;code&gt;places&lt;/code&gt; library so that we can both search for locations and embed our Google Map.&lt;/p&gt;

&lt;h2 id=&quot;client-side-templates-add-job&quot;&gt;Client Side Templates (Add Job)&lt;/h2&gt;

&lt;p&gt;Our client side html template will be composed of four parts. The first part is a simple AutoForm that allows us to submit a job title and location to the database.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/2e9316fc2b2a6f9b8fa5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The first thing to notice is our AutoForm schema &lt;code&gt;jobSchema&lt;/code&gt; which is just a helper that returns &lt;code&gt;Schemas.Job&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/878c1fa83be337bcd714.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This will allow us to specify our &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; quickfields. Also notice the &lt;code&gt;addJob&lt;/code&gt; meteormethod which maps to our &lt;code&gt;addJob&lt;/code&gt; database insert code we defined above. No extra code is needed to connect this form to that Meteor method, it’s all handled automatically by AutoForm. We also define a global template helper called &lt;code&gt;googleMapsReady&lt;/code&gt; which ensures that the Google api is correctly loaded before we attempt to render our &lt;code&gt;googleplace&lt;/code&gt; input.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/a438b443ef483baf8c49.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Don’t forget to specify &lt;code&gt;type=&quot;googleplace&quot;&lt;/code&gt; for the location quickfield, or else the google places api will not be loaded!&lt;/p&gt;

&lt;h2 id=&quot;client-side-templates-search&quot;&gt;Client Side Templates (Search)&lt;/h2&gt;

&lt;p&gt;The second part of our client side template is another simple autoform that will perform the location search using another &lt;code&gt;googleplace&lt;/code&gt; input along with a radius field.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/3946d1a6540e84b4669f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice these fields match the &lt;code&gt;Schemas.Search&lt;/code&gt; SimpleSchema we defined earlier in the tutorial, and the &lt;code&gt;searchSchema&lt;/code&gt; template helper should return that SimpleSchema object (similar to how the &lt;code&gt;jobSchema&lt;/code&gt; template helper did above). This AutoForm template does not use &lt;code&gt;meteormethod&lt;/code&gt; and instead uses &lt;code&gt;normal&lt;/code&gt; which means we will be treating it as a normal form submit. Why we do that will be explained when we move on to the JavaScript portion of the client side templates.&lt;/p&gt;

&lt;h2 id=&quot;client-side-templates-display&quot;&gt;Client Side Templates (Display)&lt;/h2&gt;

&lt;p&gt;The third and fourth part of our client side templates is just to display the search results.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/8e62f53ebcb045def220.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice for the first row we iterate over a &lt;code&gt;jobs&lt;/code&gt; template helper and display the title of the job and the address where the job is located. In the second row we just add a div with id &lt;code&gt;searchMapContainer&lt;/code&gt;. This is where we will be rendering our embedded Google Map. Adding all the html together produces the following template:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/fc073273309b64abcfc3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We also need to add a small css file to ensure our &lt;code&gt;searchMapContainer&lt;/code&gt; is correctly sized&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/0f48399bb59294f9e966.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it for the html/css code. We can now move on to the JavaScript portion of the client side code!&lt;/p&gt;

&lt;h2 id=&quot;client-side-javascript-rendering-our-google-map&quot;&gt;Client Side JavaScript (Rendering our Google Map)&lt;/h2&gt;

&lt;p&gt;The first part of our &lt;code&gt;index.js&lt;/code&gt; file will focus on rendering the Google Map in our website so that we can later add markers to it based on the job location. We can accomplish this with the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/9e0f664259dd7da3e957.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In our &lt;code&gt;onRendered&lt;/code&gt; function we create a simple &lt;code&gt;autorun&lt;/code&gt; function that waits until the &lt;code&gt;GoogleMaps&lt;/code&gt; api has been loaded before calling our &lt;code&gt;createMap&lt;/code&gt; function. The &lt;code&gt;createMap&lt;/code&gt; function just creates a &lt;code&gt;latlng&lt;/code&gt; object using some default coordinates and renders a map to our &lt;code&gt;searchMapContainer&lt;/code&gt; div we created in our template html code. Once this code has been added to your &lt;code&gt;index.js&lt;/code&gt; you should see a page similar to below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JOC8bWu.png&quot; alt=&quot;Google Maps embedded&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;client-side-javascript-search-code&quot;&gt;Client side JavaScript (Search Code)&lt;/h2&gt;

&lt;p&gt;Now that our Google Map is rendered on our website we can add the code that will subscribe to our &lt;code&gt;jobSearch&lt;/code&gt; pubication and render markers on our map and populate our &lt;code&gt;jobs&lt;/code&gt; template helper.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4e2dbb0d16de90fbb489.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Starting from our &lt;code&gt;onRendered&lt;/code&gt; function we see that we have added two new &lt;code&gt;autorun&lt;/code&gt; functions. The first one waits on the reactive-var &lt;code&gt;SearchData&lt;/code&gt; and subscribes to our &lt;code&gt;jobSearch&lt;/code&gt; publisher we created before. The second one waits on the reactive &lt;code&gt;Jobs.find({})&lt;/code&gt; which when populated with data (which will occur when our &lt;code&gt;jobSearch&lt;/code&gt; subscription completes) will call our &lt;code&gt;addMarkersToMap&lt;/code&gt; function to render markers in the location where the job was specified.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;addMarkersToMap&lt;/code&gt; function simply removes the existing markers that were added and iterates through the passed in jobs, added a new marker for each job based on the job’s lat and lon values. We also added a &lt;code&gt;click&lt;/code&gt; listener for when you click on one of the markers. You could do something like open a popup with job information or highlight the job in a list, but for now we simply output the job to the console.&lt;/p&gt;

&lt;p&gt;Additionally we add our &lt;code&gt;searchJob&lt;/code&gt; AutoForm hook that sets the &lt;code&gt;SearchData&lt;/code&gt; reactive-var with data from our search form. This way when someone performs a search the &lt;code&gt;SearchData&lt;/code&gt; variable is changed which triggers a new search subscription, returning our search data. That subscription then triggers the new &lt;code&gt;Jobs.find({})&lt;/code&gt; which populates both the template helper and our map markers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for the tutorial. We accomplished a lot in this long tutorial. The end goal is that we were able to reactively update an embeded Google Map widget based on a locaiton search we performed. If you have any questions or suggestions make sure to leave a comment! Again the full source code for this tutorial is available on &lt;a href=&quot;https://github.com/quackware/meteor-location-search&quot;&gt;My GitHub Page&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Create and Send an iCal Invitation Email</title>
   <link href="http://curtismlarson.com/blog/2015/12/06/meteor-send-ical-email-invitation/"/>
   <updated>2015-12-06T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/12/06/meteor-send-ical-email-invitation</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial I will show you how to send an iCal invitation email using basic Meteor packages and an iCal generator smart package. iCal files are useful because they allow the email recipient to instantly add the invitation or event to their calendar program directly form their email client. If you send emails with any sort of event information you should be sending an iCal file! The full source code for this tutorial is available on my &lt;a href=&quot;https://github.com/quackware/meteor-send-invitation&quot;&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;There are a few packages you need to get started&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add email
meteor add quackware:ical-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The email package is pretty straightforward, it’s the basic email package provided by Meteor. The ical-generator is the npm package &lt;a href=&quot;https://www.npmjs.com/package/ical-generator&quot;&gt;ical-generator&lt;/a&gt; that has been &lt;a href=&quot;http://www.curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package/&quot;&gt;wrapped as a meteor smart package&lt;/a&gt;. You can check out the source code of the smart package &lt;a href=&quot;https://github.com/quackware/meteor-ical-generator&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You also need to sign up for some sort of 3rd party email service (sendgrid, mandrill, etc) so that you can set your &lt;code&gt;MAIL_URL&lt;/code&gt; variable in the server, allowing you to send emails. For this tutorial I used a mandrill account, but they are all very similar to use.&lt;/p&gt;

&lt;h2 id=&quot;client-side&quot;&gt;Client Side&lt;/h2&gt;

&lt;p&gt;The client side code for this tutorial is very basic. We just need to have a few fields in a form that we can submit to the server. You can see the &lt;code&gt;send-invitation.html&lt;/code&gt; and &lt;code&gt;send-invitation.js&lt;/code&gt; files below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/bdb509817ef76af80efa.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/quackware/de8d369ff3f979989573.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;These fields are just a sample of what you can include in an ical file. You can check out the documentation for ical-generator &lt;a href=&quot;https://www.npmjs.com/package/ical-generator&quot;&gt;here&lt;/a&gt; which should give you a good idea of additional fields you might want to add.&lt;/p&gt;

&lt;h2 id=&quot;server-side&quot;&gt;Server Side&lt;/h2&gt;

&lt;p&gt;The first part of the server side code is setting up the &lt;code&gt;MAIL_URL&lt;/code&gt; variable. I am setting it based on the user and password variables I have stored in my &lt;code&gt;settings.json&lt;/code&gt; file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/30ce2c9b9a96440098a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can read a more in depth discussion of setting up the &lt;code&gt;MAIL_URL&lt;/code&gt; variable and the &lt;code&gt;settings.json&lt;/code&gt; file in my &lt;a href=&quot;http://www.curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun/&quot;&gt;send template emails from the server tutorial&lt;/a&gt;. That tutorial uses mailgun, but mandrill works the exact same way.&lt;/p&gt;

&lt;p&gt;We also need to implement the &lt;code&gt;sendInvitation&lt;/code&gt; Meteor method we referenced in the client side code. This code uses our &lt;code&gt;quackware:ical-generator&lt;/code&gt; package we already added.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/34c8c0dab4d4de680ecd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see we create an empty ical object and then add an event to the calendar object populated with the data from the client side. We can then use &lt;code&gt;cal.toString()&lt;/code&gt; to attach the ical file as an attachment using the built in &lt;code&gt;Email.send&lt;/code&gt; function provided by Meteor. That’s it! Once you test it out and send an email you should see an email similar to the one below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/s4uACyM.png&quot; alt=&quot;Example Ical Email&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thats it! Meteor makes it very easy to both send emails and include additional packages like the ical-generator to add additional functionality to our application. Again the full source code for this tutorial is available on my &lt;a href=&quot;https://github.com/quackware/meteor-send-invitation&quot;&gt;GitHub page&lt;/a&gt;. If you have any improvements or suggestions make sure to leave a comment!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Video Tutorial - Build a Reddit Clone</title>
   <link href="http://curtismlarson.com/blog/2015/12/03/meteor-video-tutorial-reddit-clone/"/>
   <updated>2015-12-03T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/12/03/meteor-video-tutorial-reddit-clone</id>
   <content type="html">&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;

&lt;p&gt;I just published my first Meteor video class on the Udemy platform! Pretty excited about it since I put a lot of work into it. The tutorial is a beginner level tutorial on how to build a Reddit Clone and runs about 3 hours. If you interested you can check out the tutorial below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/beginner-meteor-development-build-a-basic-reddit-clone/learn&quot;&gt;https://www.udemy.com/beginner-meteor-development-build-a-basic-reddit-clone/learn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use coupon code ‘website’ for 20% off!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Wrap and Publish a NPM package</title>
   <link href="http://curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package/"/>
   <updated>2015-11-20T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Building off of my previous tutorial on &lt;a href=&quot;www.curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/&quot;&gt;how to create a package in Meteor&lt;/a&gt; I decided to create another tutorial on how to wrap and publish a NPM package. There are thousands of useful npm packages that can be used through &lt;code&gt;meteorhacks:npm&lt;/code&gt;, but sometimes it’s nice to create a meteor smart package and add some extra functionality to make it even easier to include in your project.&lt;/p&gt;

&lt;p&gt;For this tutorial I will be wrapping the &lt;a href=&quot;https://github.com/t3chnoboy/amazon-product-api&quot;&gt;Amazon Product Api&lt;/a&gt; Node.js client. The full source code for the Meteor package is available on my GitHub &lt;a href=&quot;https://github.com/quackware/meteor-amazon-product-api&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-steps&quot;&gt;The Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-a-package&quot;&gt;1. Create a package&lt;/h3&gt;

&lt;p&gt;Similar to the &lt;a href=&quot;www.curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/&quot;&gt;how to create a package&lt;/a&gt; tutorial, we need to create a new package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --package atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;edit-the-packagejs-file&quot;&gt;2. Edit the package.js file&lt;/h3&gt;

&lt;p&gt;Now we need to make some edits to the &lt;code&gt;package.js&lt;/code&gt; file to specify our Npm dependency and point the package to our server file where we will be making some Meteor specific customizations. First we add the following Npm dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Npm.depends({
  &quot;amazon-product-api&quot;: &quot;0.3.5&quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we also need to add an export in the &lt;code&gt;Package.onUse&lt;/code&gt; block, we’re going to choose &lt;code&gt;AmazonProductApi&lt;/code&gt; as our export.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package.onUse(function(api) {
  api.versionsFrom('1.2.1');
  api.export(&quot;AmazonProductApi&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we need to reference the javascript file in &lt;code&gt;package.js&lt;/code&gt; that will glue together the Npm package with Meteor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package.onUse(function(api) {
  api.versionsFrom('1.2.1');
  api.export(&quot;AmazonProductApi&quot;);
  api.addFiles([&quot;server/amazon-product-api.js&quot;], &quot;server&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-glue-file&quot;&gt;3. The Glue File&lt;/h3&gt;

&lt;p&gt;Go ahead and create the &lt;code&gt;amazon-product-api.js&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir server
touch server/amazon-product-api.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this file we can add our &lt;code&gt;Npm.require&lt;/code&gt; and setup the object we need to export.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amazon = Npm.require(&quot;amazon-product-api&quot;);

AmazonProductApi = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the amazon product api package has three functions: &lt;code&gt;itemSearch&lt;/code&gt;, &lt;code&gt;itemLookup&lt;/code&gt;, and &lt;code&gt;browseNode&lt;/code&gt; that are exposed in the &lt;code&gt;createClient&lt;/code&gt; function. These functions have a future usage and a callback usage. Let’s go ahead and add a syncronous usage to better use it in our Meteor projects. To do this we just need to add the &lt;code&gt;createClient&lt;/code&gt; function to our exported object and wrap the functions using &lt;code&gt;Meteor.wrapAsync&lt;/code&gt;. Below is the full code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amazon = Npm.require(&quot;amazon-product-api&quot;);

AmazonProductApi = {};

AmazonProductApi.createClient = function(credentials) {
  var client = amazon.createClient(credentials);
  client.itemSearchSync = Meteor.wrapAsync(client.itemSearch);
  client.itemLookupSync = Meteor.wrapAsync(client.itemLookup);
  client.browseNodeSync = Meteor.wrapAsync(client.browseNode);
  return client;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;publishing-to-atmosphere&quot;&gt;4. Publishing to Atmosphere&lt;/h3&gt;

&lt;p&gt;Now that our package is complete, we can publish it to atmosphere so that other people can use it. Make sure you are in your package directory and type the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor publish --create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your package should now be built and uploaded to atmosphere.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! Now whenever someone wants to use the awesome &lt;a href=&quot;https://github.com/t3chnoboy/amazon-product-api&quot;&gt;Amazon Product Api&lt;/a&gt; npm package, they can just type &lt;code&gt;meteor add quackware:amazon-product-api&lt;/code&gt;. They can also take advantage of our new syncronous functions we added. Again, the full source code for the Meteor package is available on my GitHub &lt;a href=&quot;https://github.com/quackware/meteor-amazon-product-api&quot;&gt;here&lt;/a&gt;. Leave a message if you have any questions or comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>MobileVideoDownloader.com built in Meteor</title>
   <link href="http://curtismlarson.com/blog/2015/11/19/mobile-video-downloader/"/>
   <updated>2015-11-19T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/19/mobile-video-downloader</id>
   <content type="html">&lt;h2 id=&quot;mobile-video-downloader&quot;&gt;Mobile Video Downloader&lt;/h2&gt;

&lt;p&gt;Just finished the first round of another simple website &lt;a href=&quot;http://www.mobilevideodownloader.com&quot;&gt;Mobile Video Downloader&lt;/a&gt;. It’s just a basic video downloader (with search) that is optimized for mobile devices. Building it in Meteor enabled me to finish this site ultra fast.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The entire website is open source and available on my github &lt;a href=&quot;https://github.com/quackware/mobilevideodownloader&quot;&gt;here&lt;/a&gt;. Make sure to leave any comments or suggestions you have!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Create a Package</title>
   <link href="http://curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/"/>
   <updated>2015-11-19T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I usually always have to google the steps to create a Meteor package, so I figured I would do a write up for myself that I can reference. I hope this helps anyone else that has trouble creating a meteor package&lt;/p&gt;

&lt;h2 id=&quot;the-steps&quot;&gt;The Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-the-package&quot;&gt;1. Create the package&lt;/h3&gt;

&lt;p&gt;Open a terminal and navigate to the directory you want to store the package in. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --package atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-the-test-application&quot;&gt;2. Create the test application&lt;/h3&gt;

&lt;p&gt;Enter the following commands. This will create a test app you can use to test your package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd packagename
meteor create test-app
cd test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-a-packages-folder-for-test-app&quot;&gt;3. Create a packages folder for test-app&lt;/h3&gt;

&lt;p&gt;We need a place to store our new package in our test app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir packages
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;symlink-your-package-to-the-test-app&quot;&gt;4. Symlink your package to the test-app&lt;/h3&gt;

&lt;p&gt;Now we can link our new package into our test-app, so that any modifications we make to the package will show up in our app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd packages
ln -s ../../../packagename ./packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;add-the-package&quot;&gt;5. Add the package&lt;/h3&gt;

&lt;p&gt;All that’s left is to add the package to our test-app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it. Now when you run &lt;code&gt;meteor list&lt;/code&gt; in your test-app you should see the packagename show up. If you are interested in wrapping a npm package in a Meteor package you can also check out my new tutorial, &lt;a href=&quot;http://www.curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package/&quot;&gt;Meteor - Wrap and Publish a NPM package&lt;/a&gt;. Now go write the next awesome meteor package!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>RandomPowerHour.com built in Meteor</title>
   <link href="http://curtismlarson.com/blog/2015/11/17/random-power-hour/"/>
   <updated>2015-11-17T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/17/random-power-hour</id>
   <content type="html">&lt;h2 id=&quot;random-power-hour&quot;&gt;Random Power Hour&lt;/h2&gt;

&lt;p&gt;I recently just wrapped up a small one day project. Building a random power hour creator in Meteor. It pulls YouTube videos from a selected playlist, mixes them up, and plays random clips from them, creating the perfect drinking game! You can visit the site below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.randompowerhour.com&quot;&gt;Random Power Hour&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The entire website is open source and available on my github &lt;a href=&quot;https://github.com/quackware/meteor-randomhour&quot;&gt;here&lt;/a&gt;. Make sure to leave any comments or suggestions you have.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - iron:router Scroll to Top</title>
   <link href="http://curtismlarson.com/blog/2015/11/11/iron-router-scroll-to-top/"/>
   <updated>2015-11-11T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/11/iron-router-scroll-to-top</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I use the awesome &lt;a href=&quot;https://github.com/iron-meteor/iron-router&quot;&gt;iron:router&lt;/a&gt; package in all my Meteor projects. One problem I run into in almost all packages is if you use &lt;code&gt;Router.go()&lt;/code&gt; while scrolled down onto the page, your next page will rendered still scrolled at the same point. Here is some code that will fix that and scroll to the top of the page on each route.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;We are just going to use a simple &lt;code&gt;autorun&lt;/code&gt; function that depends on the reactive &lt;code&gt;Router.current()&lt;/code&gt; object. Check out the code below&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/a66c39297edd0c139446.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it! Very simple, but something I always include in my boilerplate code when I first create an application. Make sure to leave any questions or comments you have.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to Deploy a Meteor project to AWS EC2</title>
   <link href="http://curtismlarson.com/blog/2015/11/03/deploy-meteor-to-aws/"/>
   <updated>2015-11-03T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/03/deploy-meteor-to-aws</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a step by step guide on how to deploy a Meteor project to Amazon Web Services (AWS). This guide assumes you have little to no technical knowledge of AWS or Meteor and you start out with a zipped file containing your Meteor project. It also assumes you have knowledge of basic unix commands like cd, ls, and mkdir. I am also assuming you are using a mac / linux based computer. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;the-tools&quot;&gt;The Tools&lt;/h2&gt;

&lt;p&gt;The first tool you need is Node.js which is available &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;here&lt;/a&gt;. After you have node installed you can bring up your terminal and type &lt;code&gt;npm&lt;/code&gt; to make sure you have the Node package manager installed correctly (See below image).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/HAQGTua.png&quot; alt=&quot;npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you verify that npm is installed you need to install &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; through npm which will help us deploy the project to an ec2 server. You can install it by typing the following command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g mup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/pylYMVS.png&quot; alt=&quot;Install mup npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You also need to install meteor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g meteor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now need to navigate to your project directory via the terminal. If you are familiar with the &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; unix commands it should be pretty straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/project/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are unfamiliar with unix commands you can navigate to System Preferences -&amp;gt; Keyboard -&amp;gt; Services (Left Hand Side) -&amp;gt; Scroll down and check the &lt;code&gt;New Terminal at Folder&lt;/code&gt; checkbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/1EsrGt2.png&quot; alt=&quot;New Terminal At Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can right click your project folder in Finder -&amp;gt; Services -&amp;gt; New Terminal at Folder which will open a terminal in your project directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/SbQ6z6w.png&quot; alt=&quot;New Terminal At Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you are in your deployment directory you must create a new file named &lt;code&gt;mup.json&lt;/code&gt; and copy and paste the below code and save the file (You can do this either through the Terminal or Finder).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4aad8874a59ec2624e4c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We will be changing some of these values later on in the tutorial once we have setup our server.&lt;/p&gt;

&lt;h2 id=&quot;aws-management-console&quot;&gt;AWS Management Console&lt;/h2&gt;

&lt;p&gt;Login to your &lt;a href=&quot;https://aws.amazon.com/console/&quot;&gt;AWS Management Console&lt;/a&gt; and you should see a screen similar to below (If you don’t have an AWS account, they are very straightforward to create and is not covered by this tutorial)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/RThAxXC.png&quot; alt=&quot;AWS Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;EC2&lt;/code&gt; option in the top left and select the blue &lt;code&gt;Launch Instance&lt;/code&gt; option. On the next screen you should see a selection of different server types. You will want to pick the &lt;code&gt;Ubuntu Server SSD Volume Type&lt;/code&gt; since it works best with &lt;code&gt;mup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/u6kwg7w.png&quot; alt=&quot;Ubunutu AMI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will now be greeted with a selection of different instance types. For my simple project I will be using a free tier option, but you should do your research or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#117;&amp;#114;&amp;#116;&amp;#105;&amp;#115;&amp;#064;&amp;#099;&amp;#117;&amp;#114;&amp;#116;&amp;#105;&amp;#115;&amp;#109;&amp;#108;&amp;#097;&amp;#114;&amp;#115;&amp;#111;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#073;&amp;#032;&amp;#110;&amp;#101;&amp;#101;&amp;#100;&amp;#032;&amp;#104;&amp;#101;&amp;#108;&amp;#112;&amp;#032;&amp;#115;&amp;#101;&amp;#116;&amp;#116;&amp;#105;&amp;#110;&amp;#103;&amp;#032;&amp;#117;&amp;#112;&amp;#032;&amp;#109;&amp;#121;&amp;#032;&amp;#077;&amp;#101;&amp;#116;&amp;#101;&amp;#111;&amp;#114;&amp;#032;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#033;&quot;&gt;ask a meteor expert&lt;/a&gt; if you are unsure on what tier option to use. Go ahead and select &lt;code&gt;Next: Configure Instance Details&lt;/code&gt; to continue.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-server-options&quot;&gt;Setting up Server Options&lt;/h2&gt;

&lt;p&gt;The next steps will be based on what type of app you have. Most people will not need to change anything on the &lt;code&gt;Configure Instance Details&lt;/code&gt; page, so go ahead and select &lt;code&gt;Next: Add Storage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you think your app requires additional storage (most will not as long as you chose the correct server in the above app) you can add volumes in this screen. If anyone is curious on how to add additional volumes for their Meteor app just leave a comment and I will update the guide&lt;/p&gt;

&lt;p&gt;On Step 5: Tag Instance, just give your server a useful name that reflects your meteor project and proceed to the next step&lt;/p&gt;

&lt;h2 id=&quot;configure-security-groups&quot;&gt;Configure Security Groups&lt;/h2&gt;

&lt;p&gt;Setting up correct security groups is important for any app you host on AWS. You want to allow ssh traffic for mup and if you want to ssh into your server in the future, and http/https traffic for people visiting your website. You can also specify ssh rules for only your IP address as an additional security precaution. Using the below configuration should work for most people&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/2M7BaiE.png&quot; alt=&quot;Configure Security Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you have added your security groups you can go ahead and click &lt;code&gt;Review and Launch&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keypair--launching-your-instance&quot;&gt;Keypair &amp;amp; Launching Your Instance&lt;/h2&gt;

&lt;p&gt;After reviewing your instance information you can go ahead and click &lt;code&gt;Launch&lt;/code&gt;. This will launch a popup asking you to use an existing or create a new keypair. We are going to create a new one and download it. It is very important that you keep the keypair in a secure location, this file will be used by &lt;code&gt;mup&lt;/code&gt; and anyone else that wants to ssh into your server (As long as they are added to the ssh rules for your instance). Once the file is downloaded click &lt;code&gt;Launch Instance&lt;/code&gt; again. Go ahead and click &lt;code&gt;View Instance&lt;/code&gt; and you will be directed to your instance dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/fEXcJ50.png&quot; alt=&quot;Creating keypair&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-instance-information&quot;&gt;Getting instance information&lt;/h2&gt;

&lt;p&gt;Now that we have successfully launched our instance we need to get some information from the instance dashboard so that mup can deploy the meteor project. Once the instance is running select it from the list and record the &lt;code&gt;Public IP&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/0S5c3hl.png&quot; alt=&quot;Public IP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to where you saved your .pem file via the terminal (either through unix commands or the New Terminal at Folder method). Type the following command into the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 400 name-of-pem.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/2WVjf2g.png&quot; alt=&quot;chmod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will allow ssh and mup access to your pem file. You can now test to see if you can ssh into your server with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i /path/to/pem.pem ubuntu@public-ip-address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/TZLBgqW.png&quot; alt=&quot;SSH amazon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have successfully connected to your server, Congratulations! Now all you need to do is edit your &lt;code&gt;mup.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;editing-the-mupjson-file&quot;&gt;Editing the mup.json file&lt;/h2&gt;

&lt;p&gt;Once your &lt;code&gt;mup.json&lt;/code&gt; file is open, you need to change the following values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;host&quot;: &quot;hostname&quot; -&amp;gt; &quot;host&quot;: &quot;PUBLIC_IP_ADDRESS&quot;
&quot;username&quot;:&quot;root&quot; -&amp;gt; &quot;username&quot;:&quot;ubuntu&quot;
&quot;password&quot;:&quot;password&quot; -&amp;gt; //&quot;password&quot;:&quot;password&quot;
//&quot;pem&quot;:&quot;~/.ssh/id_rsa&quot; -&amp;gt; &quot;pem&quot;:&quot;path/to/your/pemfile.pem&quot;
&quot;app&quot;: &quot;/path/to/the/app&quot; -&amp;gt; &quot;app&quot;: &quot;[the local path of your app]&quot;,
&quot;appName&quot;:&quot;meteor&quot; -&amp;gt; &quot;appName&quot;:&quot;[your-app-name]&quot;
&quot;ROOT_URL&quot;:&quot;http://myapp.com&quot; -&amp;gt; &quot;ROOT_URL&quot;:&quot;[whatever your url is]&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save and exit your text editor.&lt;/p&gt;

&lt;h2 id=&quot;deploying-with-mup&quot;&gt;Deploying with Mup&lt;/h2&gt;

&lt;p&gt;Navigate to your project directory in a terminal and run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mup setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well you should see the following output. If something bad happens double check all your values in your mup.json file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/GNONEGV.png&quot; alt=&quot;mup setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that mup has installed all the necessary requirements for Meteor on your server. You can type the following command to upload your project to the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mup deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/4uGXf6s.png&quot; alt=&quot;mup deploy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! You can now check out your app either directly through your public ip address or through the ROOT_URL you set (as long as your DNS records are set up correctly). If you have any questions or requests for additions to this guide, just leave them in the comments!&lt;/p&gt;

</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Dynamically Render a PDF with iron:router</title>
   <link href="http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router/"/>
   <updated>2015-09-11T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A cool trick I found out recently is how to dynamically render a pdf from the server to the client using iron:router. The idea is you have a pdf object stored in a database or external file store and you want to transfer that pdf to the client without directly accessing the pdf file. We are going to accomplish this with a server side iron:router route. You can access the full code for this tutorial on my GitHub page &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-route-file&quot;&gt;The Route File&lt;/h2&gt;

&lt;p&gt;The first method of rendering the pdf from the server involves the wonderful &lt;a href=&quot;https://github.com/CollectionFS/Meteor-CollectionFS&quot;&gt;CollectionFS&lt;/a&gt; package which can be used to store files in a variety of different data stores including mongoDB, dropbox, and Amazon S3. We can accomplish this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/c13931a2e2c9b4216b88.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some important thigns to note include the creation of a readable object through &lt;code&gt;file.createReadStream(&quot;tmp&quot;)&lt;/code&gt; which we then read into the &lt;code&gt;buffer&lt;/code&gt; object. Once we have completely read from the &lt;code&gt;FS.File&lt;/code&gt; object we can write the response to the client through the node &lt;code&gt;this.response.write(buffer);&lt;/code&gt; statement. Also make sure to include the &lt;code&gt;where: &quot;server&quot;&lt;/code&gt; in the route to ensure that it only executes as a server side route.&lt;/p&gt;

&lt;p&gt;An additional way to render a pdf from the server to the client is to read the pdf from the file system, read it into a buffer using the node.js &lt;code&gt;fs&lt;/code&gt; package, and feed it to the client. Make sure you install the &lt;code&gt;meteorhacks:npm&lt;/code&gt; package so you can include the &lt;code&gt;fs&lt;/code&gt; node.js package. You can accomplish all this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/52d139c978bb05535cff.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pretty straight forward and similar to the above gist.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for this tutorial, hopefully it helps out anyone who wants to dynamically render a pdf from the server without directly accessing the file. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - MongoDB Object Array Property Selector</title>
   <link href="http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector/"/>
   <updated>2015-08-08T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One slightly confusing question that I get asked sometimes and I see around the internet is how to select a document from a collection based on a property in an array of objects.&lt;/p&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;SimpleSchema&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Schema = {};

Schema.Task = new SimpleSchema({
  name: {
    type: String,
    label: &quot;Task Name&quot;
  },
  tags: {
    type: [Object],
    label: &quot;Tags&quot;,
  },
  &quot;tags.$.name&quot;: {
    type: String
  },
  &quot;tags.$.rank&quot;: {
    type: Number
  }
});

Tasks.attachSchema(Schema.Task);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have inserted the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.insert({
  name: &quot;Write Meteor Tutorial&quot;,
  tags: [
    {
      &quot;name&quot;: &quot;Meteor&quot;,
      &quot;rank&quot;: 0
    },
    {
      &quot;name&quot;: &quot;Tutorial&quot;,
      &quot;rank&quot;: 1
    }
  ]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we want to select all the tasks that have a tag with the name “Meteor”. We can use the following syntax to perform this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we did not include the &lt;code&gt;$&lt;/code&gt; symbol that we used when specifying our &lt;code&gt;SimpleSchema&lt;/code&gt;. Additionally if we only want to select the tags and not the entire &lt;code&gt;Tasks&lt;/code&gt; object we can use a &lt;code&gt;fields&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
}, {
  fields: { &quot;tags.$&quot;: 1}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The differing syntax may seem a bit confusing, but once you get the hang of it you can create some pretty powerful and complex schemas and selectors. Hope this helps anyone running into this problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Send Template Emails from the Server with Mailgun</title>
   <link href="http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun/"/>
   <updated>2015-07-30T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial I will show you how I have been sending template emails from the server with Mailgun. This is very useful if you want to send transactional or newsletter emails using a pre existing template, but you also want to dynamically populate the email with data from one of your Collections. The full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;This tutorial requires the following dependencies (which will be auto downloaded if you clone the tutorial directly):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iron:router
meteorhacks:npm
meteorhacks:ssr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally you need to specify the following &lt;code&gt;meteorhacks:npm&lt;/code&gt; dependency in a &lt;code&gt;package.json&lt;/code&gt; file in your root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;mailgun&quot;: &quot;0.5.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-email-template&quot;&gt;The Email Template&lt;/h2&gt;

&lt;p&gt;For this tutorial I chose a basic email template (modified slightly for Meteor specific stuff) from the mailgun website. It is &lt;strong&gt;IMPORTANT&lt;/strong&gt; that you put the template file in the &lt;code&gt;private/&lt;/code&gt; directory of your project so that it can be accessed by &lt;code&gt;Assets.getText&lt;/code&gt; on the server. I created the following file and placed it at &lt;code&gt;private/email-template.html&lt;/code&gt;. Note the placeholders &lt;code&gt;mainTitle&lt;/code&gt;, &lt;code&gt;tasks&lt;/code&gt;, &lt;code&gt;task.title&lt;/code&gt;, &lt;code&gt;task.url&lt;/code&gt;, and &lt;code&gt;unsubscribe&lt;/code&gt;. You will see how we will replace those placeholders with data from our collection later.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/341cd73d196236f78b31.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;startup-code&quot;&gt;Startup Code&lt;/h2&gt;

&lt;p&gt;Now that we have our email template, we need to add some code to our server that is run on startup. I created a file called &lt;code&gt;startup.js&lt;/code&gt; that will setup our template rendering system and setup our mailgun settings. The code can be seen below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4f30b6007e89a45766b9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice the creation of a &lt;code&gt;templates&lt;/code&gt; array, which we push a single name and path to. The name is used when we want to reference a specific template when we send an email and the path references the relative location of the template html file to the &lt;code&gt;private/&lt;/code&gt; directory. This template array is passed to a &lt;code&gt;EmailGenerator&lt;/code&gt; object which we will implement in the next section. Another important thing to note is the various &lt;code&gt;Meteor.settings&lt;/code&gt; variables I use in setting up my stmp &lt;code&gt;MAIL_URL&lt;/code&gt;. These variables are read from a &lt;code&gt;settings.json&lt;/code&gt; file that is loaded when you start meteor like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor --settings settings.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example settings.json file for this tutorial would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/b70c9cf3c43fa0e01c13.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;mailgun&quot;&gt;Mailgun&lt;/h2&gt;

&lt;p&gt;The mailgun code is composed of a single &lt;code&gt;Meteor.method&lt;/code&gt; that takes in basic email information and forwards it to the mailgun api we imported using &lt;code&gt;meteorhacks:npm&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/41cd6ba173d14a66557a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note that we use &lt;code&gt;sendRaw&lt;/code&gt; here to take advantage of html emails, which requires us to format the rest of the email body manually.&lt;/p&gt;

&lt;h2 id=&quot;emailgenerator&quot;&gt;EmailGenerator&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EmailGenerator&lt;/code&gt; object contains two simple methods, one we saw above that compiles each template html file using &lt;code&gt;meteorhacks:ssr&lt;/code&gt;, and another that generates the html from the compiled template. You can see the code for the &lt;code&gt;EmailGenerator&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/820b7cc9f7f5f7ee24ec.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A few important things to note is the &lt;code&gt;templateName&lt;/code&gt; argument of &lt;code&gt;generateHtml&lt;/code&gt; which is used to referene the template we passed in with &lt;code&gt;addTemplates&lt;/code&gt;, and also the &lt;code&gt;data&lt;/code&gt; parameter of &lt;code&gt;generateHtml&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; parameter is what will populate the various handlebar templates in our &lt;code&gt;email-templates.html&lt;/code&gt; file. This data will come from our Meteor collection we set up in the next section.&lt;/p&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is composed of two very basic &lt;code&gt;Meteor.methods&lt;/code&gt;: &lt;code&gt;addTask&lt;/code&gt; and &lt;code&gt;sendEmail&lt;/code&gt;. Both of these methods will be called from the client code that we implement in the next section.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/1f06550d64a7770a8fad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;addTask&lt;/code&gt; does exactly what it’s name implies, adds a task composed of a title and url to a Mongo.collection we created with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks = new Mongo.Collection(&quot;tasks&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;specified in a seperate javascript file (You can add that line anywhere in the server code). &lt;code&gt;sendEmail&lt;/code&gt; is slightly more complicated, but basically acts as the glue between all our previously implemented code. It pulls all the tasks from the database, creates that data object that we then pass to &lt;code&gt;EmailGenerator.generateHtml&lt;/code&gt;, and calls the &lt;code&gt;sendMailGunEmail&lt;/code&gt; method with the generated email html which forwards the email to our mailgun api.&lt;/p&gt;

&lt;h2 id=&quot;client-code&quot;&gt;Client Code&lt;/h2&gt;

&lt;p&gt;Finally we need to create some basic client code where the user can enter a title and a url for a “task”. This task data will be sent to the server where we will insert it into the &lt;code&gt;Tasks&lt;/code&gt; collection. We can then pull data from this &lt;code&gt;Tasks&lt;/code&gt; collection and use it to populate our email template that we will create.&lt;/p&gt;

&lt;p&gt;In addition to adding tasks, we will let the user be able to click a button to send an email. This code will just perform a basic &lt;code&gt;Meteor.call&lt;/code&gt; which will call into our template generating and email sending code on the server. You can see the two files, &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/831b9cb8df0e9c849adb.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/quackware/57643c6fe549eab61695.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this helps our anyone that was interested in how to send template emails from the server with mailgun. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Windows update cannot convert null to object</title>
   <link href="http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object/"/>
   <updated>2015-07-23T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object</id>
   <content type="html">&lt;h2 id=&quot;cannot-convert-null-to-object&quot;&gt;Cannot Convert Null To Object&lt;/h2&gt;

&lt;p&gt;While attempting to update one of my meteor projects on my windows box, I ran into the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NvtJjoq.png&quot; alt=&quot;Cannot convert null to object&quot; title=&quot;Cannot convert null to object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Attempting to update the meteor binary through &lt;code&gt;meteor update&lt;/code&gt; yielded the same error.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix&quot;&gt;How to Fix&lt;/h2&gt;

&lt;p&gt;In order to fix the error, I actually had to completely uninstall meteor and reinstall from &lt;a href=&quot;https://win.meteor.com/&quot;&gt;https://win.meteor.com/&lt;/a&gt;. After everything was installed, &lt;code&gt;meteor update&lt;/code&gt; worked fine. Hope this helps anyone encountering the same problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to use iron:router waitOn with an Async Server Call</title>
   <link href="http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server/"/>
   <updated>2015-05-04T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server</id>
   <content type="html">&lt;h2 id=&quot;how-to-use-ironrouter-waiton-with-an-async-server-call&quot;&gt;How to use iron:router waitOn with an Async Server Call&lt;/h2&gt;

&lt;p&gt;There have been several &lt;a href=&quot;http://stackoverflow.com/questions/29493809/how-to-make-onbeforeaction-call-wait-until-a-function-call-inside-finishes-in-me/&quot;&gt;posts&lt;/a&gt; about utilizing iron:router’s &lt;code&gt;waitOn&lt;/code&gt; functionality for an async server call. After being disatisfied with a lot of the solutions, including my own in the aforementioned stackoverflow post, I decided to write up a simple solution that had a minimal amount of extra code in the routes file. A couple of problems that I (and many others) ran into included the &lt;code&gt;waitOn&lt;/code&gt; function running in an &lt;a href=&quot;http://stackoverflow.com/questions/25136239/meteor-0-8-3-iron-router-infinite-loop-inside-waiton-hook&quot;&gt;infinite loop&lt;/a&gt;, and also &lt;code&gt;waitOn&lt;/code&gt; &lt;a href=&quot;https://github.com/iron-meteor/iron-router/issues/1031&quot;&gt;executing twice&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;client-routes-file&quot;&gt;Client Routes File&lt;/h2&gt;

&lt;p&gt;The client routes.js file is very simple, as the core functionality is contained in a different file. Basically what I am doing is returning a &lt;code&gt;Util.waitOnServer&lt;/code&gt; call which will call the &lt;code&gt;testWaitOn&lt;/code&gt; Meteor method on the server. You can optionally pass in arguments to &lt;code&gt;Util.waitOnServer&lt;/code&gt; to pass data to the Meteor method. Once this call returns, we can then access the data through &lt;code&gt;Util.getResponse&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/71290757e28d7df89540.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;utilwaitonserver&quot;&gt;Util.waitOnServer&lt;/h2&gt;

&lt;p&gt;The Util object contains all the functionality of waiting on &lt;code&gt;Meteor.call&lt;/code&gt;. Functionality such as &lt;code&gt;getResponse&lt;/code&gt; can be easily changed to something more eloquent, and you can also change the &lt;code&gt;Meteor.call&lt;/code&gt; to be any async call. The arugments from &lt;code&gt;Util.waitOnServer&lt;/code&gt; are forwarded to the Meteor method here.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/eea7818fde0cda6a35c3.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is very simple, it just generates a random number and returns it. I also printed out the &lt;code&gt;data&lt;/code&gt; argument passed to us from the client. I just wanted a way to make sure everything was being executed in the correct order.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/703e6cf54c24f7f9b16f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The full source code is available &lt;a href=&quot;https://github.com/quackware/meteor-waitOnServer&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please post them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Trigger a Function when a Session Value Changes</title>
   <link href="http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable/"/>
   <updated>2015-04-27T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable</id>
   <content type="html">&lt;h2 id=&quot;how-to-trigger-a-function-when-a-session-value-changes&quot;&gt;How to Trigger a Function when a Session Value Changes&lt;/h2&gt;

&lt;p&gt;While working on a Meteor project, I wanted to trigger a function whenever I changed the value of a Session variable through &lt;code&gt;Session.set()&lt;/code&gt;. It took me a little bit of experimentation and digging to figure out how to do it, and the result is pretty simple.&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-it&quot;&gt;How to do it&lt;/h2&gt;

&lt;p&gt;Use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var doSomething = function() {
  // Do something when the session value changes
}

Tracker.autorun(function() {
  var sessionVal = Session.get(&quot;yourSessionVariable&quot;);
  console.log(&quot;The session value has changed&quot;);
  doSomething();
});

var anotherFunction = function() {
  Session.set(&quot;yourSessionVariable&quot;, &quot;foo&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Whenever &lt;code&gt;anotherFunction&lt;/code&gt; is executed, or whenever the session value &lt;code&gt;yourSessionVariable&lt;/code&gt; is changed in any other function, the function in the &lt;code&gt;Tracker.autorun()&lt;/code&gt; block will execute. Simple!&lt;/p&gt;

&lt;h2 id=&quot;trackerautorun&quot;&gt;Tracker.autoRun&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Tracker.autoRun()&lt;/code&gt; is the key here, as it can make arbitrary blocks of code reactive. &lt;code&gt;Session&lt;/code&gt; is already a reactive variable, so we do not need to go through the trouble of using &lt;code&gt;Tracker.Dependency&lt;/code&gt;. You can find more information about Tracker &lt;a href=&quot;http://docs.meteor.com/#/full/tracker_autorun&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to point a domain on Google Domains to GitHub pages</title>
   <link href="http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains/"/>
   <updated>2015-04-12T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains</id>
   <content type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-repository&quot;&gt;Setup repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-google-domains&quot;&gt;Configure Google Domains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When setting up my &lt;a href=&quot;http://www.curtismlarson.com&quot;&gt;website&lt;/a&gt; on Google Domains I had to read through several different guides to figure out all I needed to do to point it to a GitHub pages repository. I wrote up this guide to simplify the processes for anyone else performing this same task.&lt;/p&gt;

&lt;h2 id=&quot;setup-repository&quot;&gt;Setup repository&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt; and create a repository with the name &lt;strong&gt;USERNAME.github.com&lt;/strong&gt; or &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; and give it a nice description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zQ5BxEH.png&quot; alt=&quot;Create a repository&quot; title=&quot;Create a repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your new repository, create a &lt;strong&gt;CNAME&lt;/strong&gt; file in the root directory and add the following two entries (with curtismlarson replaced by your own domain):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LR37up5.png&quot; alt=&quot;CName&quot; title=&quot;CName&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These two entries tell GitHub to redirect any requests to &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; to the domain specified in the CNAME file. There are two entries to ensure that &lt;strong&gt;curtismlarson.com&lt;/strong&gt; will also redirect to &lt;strong&gt;www.curtismlarson.com&lt;/strong&gt;. If you prefer to have a site without the &lt;strong&gt;www&lt;/strong&gt; prefix, you can switch the order of the domains.&lt;/p&gt;

&lt;p&gt;Now verify that your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; domain is now pointing to your custom domain by going into the repository settings and verifying your GitHub Pages settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RsA5XUO.png&quot; alt=&quot;Github Pages&quot; title=&quot;GitHub Pages&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-google-domains&quot;&gt;Configure Google Domains&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://domains.google.com/registrar&quot;&gt;https://domains.google.com/registrar&lt;/a&gt; and select the &lt;strong&gt;DNS&lt;/strong&gt; option to configure your DNS records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oA40Qkq.png&quot; alt=&quot;Google Domains&quot; title=&quot;Google Domains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the very bottom of the page and add 3 Custom Resource Records. You need to add two “@” type A records that point to the GitHub ips &lt;strong&gt;192.30.252.153&lt;/strong&gt; and &lt;strong&gt;192.30.252.154&lt;/strong&gt; and one “www” CNAME record that points to your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; url:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xO3At1V.png&quot; alt=&quot;Custom Resource Records&quot; title=&quot;Custom Resource Records&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! DNS records often take more than a day to propagate so you may not see your website immediately. Once the changes have propagated your GitHub page and any project pages should be accessible from your new domain. For example &lt;a href=&quot;https://github.com/quackware/blog&quot;&gt;https://github.com/quackware/blog&lt;/a&gt; is hosting the blog you are reading right now and the domain works without any additional setup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Introduction</title>
   <link href="http://curtismlarson.com/blog/2015/04/11/introduction/"/>
   <updated>2015-04-11T00:00:00+09:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/11/introduction</id>
   <content type="html">&lt;p&gt;I’ll be using this site to talk about Software Development and what projects I’m working on. More to come!&lt;/p&gt;
</content>
 </entry>
 

</feed>
